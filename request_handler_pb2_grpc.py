# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import request_handler_pb2 as request__handler__pb2


class MovieDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMovieData = channel.unary_unary(
                '/MovieData/GetMovieData',
                request_serializer=request__handler__pb2.ItemRequest.SerializeToString,
                response_deserializer=request__handler__pb2.MovieResponse.FromString,
                )


class MovieDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetMovieData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMovieData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovieData,
                    request_deserializer=request__handler__pb2.ItemRequest.FromString,
                    response_serializer=request__handler__pb2.MovieResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MovieData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MovieData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetMovieData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieData/GetMovieData',
            request__handler__pb2.ItemRequest.SerializeToString,
            request__handler__pb2.MovieResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class FixMovieDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMoviesData = channel.unary_unary(
                '/FixMovieData/GetMoviesData',
                request_serializer=request__handler__pb2.ItemRequest.SerializeToString,
                response_deserializer=request__handler__pb2.MoviesResponse.FromString,
                )


class FixMovieDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetMoviesData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FixMovieDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMoviesData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMoviesData,
                    request_deserializer=request__handler__pb2.ItemRequest.FromString,
                    response_serializer=request__handler__pb2.MoviesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FixMovieData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FixMovieData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetMoviesData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FixMovieData/GetMoviesData',
            request__handler__pb2.ItemRequest.SerializeToString,
            request__handler__pb2.MoviesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class SimilarMovieDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSimilarMovieData = channel.unary_unary(
                '/SimilarMovieData/GetSimilarMovieData',
                request_serializer=request__handler__pb2.SimilarRequest.SerializeToString,
                response_deserializer=request__handler__pb2.MoviesResponse.FromString,
                )


class SimilarMovieDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetSimilarMovieData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimilarMovieDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSimilarMovieData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimilarMovieData,
                    request_deserializer=request__handler__pb2.SimilarRequest.FromString,
                    response_serializer=request__handler__pb2.MoviesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SimilarMovieData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimilarMovieData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetSimilarMovieData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SimilarMovieData/GetSimilarMovieData',
            request__handler__pb2.SimilarRequest.SerializeToString,
            request__handler__pb2.MoviesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class TvShowDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTvShowData = channel.unary_unary(
                '/TvShowData/GetTvShowData',
                request_serializer=request__handler__pb2.ItemRequest.SerializeToString,
                response_deserializer=request__handler__pb2.TvShowResponse.FromString,
                )


class TvShowDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetTvShowData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TvShowDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTvShowData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTvShowData,
                    request_deserializer=request__handler__pb2.ItemRequest.FromString,
                    response_serializer=request__handler__pb2.TvShowResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TvShowData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TvShowData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetTvShowData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TvShowData/GetTvShowData',
            request__handler__pb2.ItemRequest.SerializeToString,
            request__handler__pb2.TvShowResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class FixTvShowDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTvShowsData = channel.unary_unary(
                '/FixTvShowData/GetTvShowsData',
                request_serializer=request__handler__pb2.ItemRequest.SerializeToString,
                response_deserializer=request__handler__pb2.TvShowsResponse.FromString,
                )


class FixTvShowDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetTvShowsData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FixTvShowDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTvShowsData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTvShowsData,
                    request_deserializer=request__handler__pb2.ItemRequest.FromString,
                    response_serializer=request__handler__pb2.TvShowsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FixTvShowData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FixTvShowData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetTvShowsData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FixTvShowData/GetTvShowsData',
            request__handler__pb2.ItemRequest.SerializeToString,
            request__handler__pb2.TvShowsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class SimilarTvShowDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSimilarTvShowData = channel.unary_unary(
                '/SimilarTvShowData/GetSimilarTvShowData',
                request_serializer=request__handler__pb2.SimilarRequest.SerializeToString,
                response_deserializer=request__handler__pb2.TvShowsResponse.FromString,
                )


class SimilarTvShowDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetSimilarTvShowData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimilarTvShowDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSimilarTvShowData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimilarTvShowData,
                    request_deserializer=request__handler__pb2.SimilarRequest.FromString,
                    response_serializer=request__handler__pb2.TvShowsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SimilarTvShowData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimilarTvShowData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetSimilarTvShowData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SimilarTvShowData/GetSimilarTvShowData',
            request__handler__pb2.SimilarRequest.SerializeToString,
            request__handler__pb2.TvShowsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class AlbumDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAlbumData = channel.unary_unary(
                '/AlbumData/GetAlbumData',
                request_serializer=request__handler__pb2.ItemRequest.SerializeToString,
                response_deserializer=request__handler__pb2.AlbumResponse.FromString,
                )


class AlbumDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetAlbumData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlbumDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAlbumData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlbumData,
                    request_deserializer=request__handler__pb2.ItemRequest.FromString,
                    response_serializer=request__handler__pb2.AlbumResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AlbumData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AlbumData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetAlbumData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AlbumData/GetAlbumData',
            request__handler__pb2.ItemRequest.SerializeToString,
            request__handler__pb2.AlbumResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class FixAlbumDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAlbumsData = channel.unary_unary(
                '/FixAlbumData/GetAlbumsData',
                request_serializer=request__handler__pb2.ItemRequest.SerializeToString,
                response_deserializer=request__handler__pb2.AlbumsResponse.FromString,
                )


class FixAlbumDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetAlbumsData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FixAlbumDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAlbumsData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlbumsData,
                    request_deserializer=request__handler__pb2.ItemRequest.FromString,
                    response_serializer=request__handler__pb2.AlbumsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FixAlbumData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FixAlbumData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetAlbumsData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FixAlbumData/GetAlbumsData',
            request__handler__pb2.ItemRequest.SerializeToString,
            request__handler__pb2.AlbumsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class SimilarAlbumDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSimilarAlbumData = channel.unary_unary(
                '/SimilarAlbumData/GetSimilarAlbumData',
                request_serializer=request__handler__pb2.SimilarRequest.SerializeToString,
                response_deserializer=request__handler__pb2.AlbumsResponse.FromString,
                )


class SimilarAlbumDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetSimilarAlbumData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimilarAlbumDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSimilarAlbumData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimilarAlbumData,
                    request_deserializer=request__handler__pb2.SimilarRequest.FromString,
                    response_serializer=request__handler__pb2.AlbumsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SimilarAlbumData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimilarAlbumData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetSimilarAlbumData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SimilarAlbumData/GetSimilarAlbumData',
            request__handler__pb2.SimilarRequest.SerializeToString,
            request__handler__pb2.AlbumsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class RecommendationsDataStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRecommendationsData = channel.unary_unary(
                '/RecommendationsData/GetRecommendationsData',
                request_serializer=request__handler__pb2.RecommendationsRequest.SerializeToString,
                response_deserializer=request__handler__pb2.RecommendationsResponse.FromString,
                )


class RecommendationsDataServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetRecommendationsData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecommendationsDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRecommendationsData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecommendationsData,
                    request_deserializer=request__handler__pb2.RecommendationsRequest.FromString,
                    response_serializer=request__handler__pb2.RecommendationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RecommendationsData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecommendationsData(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetRecommendationsData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecommendationsData/GetRecommendationsData',
            request__handler__pb2.RecommendationsRequest.SerializeToString,
            request__handler__pb2.RecommendationsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class LinkClientStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddClient = channel.unary_unary(
                '/LinkClient/AddClient',
                request_serializer=request__handler__pb2.IdRequest.SerializeToString,
                response_deserializer=request__handler__pb2.IdResponse.FromString,
                )


class LinkClientServicer(object):
    """Missing associated documentation comment in .proto file"""

    def AddClient(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LinkClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddClient': grpc.unary_unary_rpc_method_handler(
                    servicer.AddClient,
                    request_deserializer=request__handler__pb2.IdRequest.FromString,
                    response_serializer=request__handler__pb2.IdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LinkClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LinkClient(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def AddClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LinkClient/AddClient',
            request__handler__pb2.IdRequest.SerializeToString,
            request__handler__pb2.IdResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class UnlinkClientStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RemoveClient = channel.unary_unary(
                '/UnlinkClient/RemoveClient',
                request_serializer=request__handler__pb2.IdRequest.SerializeToString,
                response_deserializer=request__handler__pb2.IdResponse.FromString,
                )


class UnlinkClientServicer(object):
    """Missing associated documentation comment in .proto file"""

    def RemoveClient(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UnlinkClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RemoveClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveClient,
                    request_deserializer=request__handler__pb2.IdRequest.FromString,
                    response_serializer=request__handler__pb2.IdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UnlinkClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UnlinkClient(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def RemoveClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UnlinkClient/RemoveClient',
            request__handler__pb2.IdRequest.SerializeToString,
            request__handler__pb2.IdResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
